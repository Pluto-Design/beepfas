---
import { api_url } from '../../consts';
import OfferCard from "./OfferCard.astro";
import { Icon } from 'astro-icon'
import { getLangFromUrl, useTranslations } from '../../i18n/utils';
import axios from 'axios';
import { Modal } from 'flowbite'
import { offerCardFunctions } from '../../i18n/ui'

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<script define:vars={{ api_url }}>

    document.addEventListener("DOMContentLoaded", () => {
        const callus = document.getElementsByClassName("modal-toggler");
        
        const $modalElement = document.querySelector('#defaultModal');
        const modal = new Modal($modalElement);

        for (let i = 0; i < callus.length; i++) {
            callus[i].addEventListener("click", () => {
                modal.toggle();
            })
        }

        document.getElementById("offercard-input-send")?.addEventListener("click", async () => {
            let errorEl = document.getElementById("offercard-input-error");
            let nameEl = document.getElementById("offercard-input-name");
            let emailEl = document.getElementById("offercard-input-email");
            let phoneEl = document.getElementById("offercard-input-phone");
            let messageEl = document.getElementById("offercard-input-message");

            if (!nameEl.value.length || !emailEl.value.length || !phoneEl.value.length || !messageEl.value.length) {
                return errorEl.innerText = "Fill in all fields!"
            } else {
                errorEl.innerText = ""
            }

            if (nameEl.value.length > 50 || nameEl.value.length < 4) {
                return errorEl.innerText = "Your name cannot be longer than 50 characters and less than 4!"
            } else {
                errorEl.innerText = ""
            }

            if (emailEl.value.length > 50 || emailEl.value.length < 4) {
                return errorEl.innerText = "Your email cannot be longer than 50 characters and less than 4!"
            } else {
                errorEl.innerText = ""
            }

            if (phoneEl.value.length > 12 || phoneEl.value.length < 4) {
                return errorEl.innerText = "Phone number cannot be longer than 12 characters and less than 4!"
            } else {
                errorEl.innerText = ""
            }
            
            if (messageEl.value.length > 500 || messageEl.value.length < 20) {
                return errorEl.innerText = "Message cannot be longer than 500 characters and less than 20!"
            } else {
                errorEl.innerText = ""
            }

            let contactForm = {
                name: nameEl.value,
                email: emailEl.value,
                phone: phoneEl.value,
                message: messageEl.value,
                type: "Free Consult"
            }

            try {
                const res = await axios.post(`${api_url}/api/v1/contacts/add`, {
                    contactForm
                })

                if (res.data.success) {
                    return errorEl.innerText = "Message has been sent!"
                } else {
                    return errorEl.innerText = "An error occurred while sending the message!"
                }
            } catch (err) {
                return errorEl.innerText = `An error occurred, make sure all fields are filled in correctly!`
            }
        })

        document.getElementById("offercard-send-btn")?.addEventListener("click", async () => {
            let inputValue = document.getElementById("offercard-value");
            let errorEl = document.getElementById("offercard-error");

            if (!inputValue.value.length) {
                return errorEl.innerText = "Type in your phone number!"
            } else {
                errorEl.innerText = ""
            }

            if (inputValue.value.length > 12 || inputValue.value.length < 4) {
                return errorEl.innerText = "Phone number cannot be longer than 12 characters and less than 4!"
            } else {
                errorEl.innerText = ""
            }

            let contactForm = {
                phone: inputValue.value,
                type: "Abonament"
            }

            try {
                const res = await axios.post(`${api_url}/api/v1/contacts/add`, {
                    contactForm
                })

                if (res.data.success) {
                    return errorEl.innerText = "Message has been sent!"
                } else {
                    return errorEl.innerText = "An error occurred while sending the message!"
                }
            } catch (err) {
                return errorEl.innerText = `An error occurred, make sure all fields are filled in correctly!`
            }
        })
    })

</script>

<section class="w-full h-auto mt-16 px-2 md:px-16" id="offer">
    <div class="w-full h-auto mt-8 flex justify-center lg:justify-start items-center py-4">
        <p class="w-auto text-3xl font-bold text-white bg-bright-red rounded-xl py-3 px-12">{t("offer")}</p>
    </div>

    <section class="w-full h-auto mt-8 md:px-16 flex flex-col lg:flex-row justify-evenly items-center">
        <OfferCard title={t("offerCardFunctions.one")} functions={offerCardFunctions[lang]["one"]} />
        <OfferCard title={t("offerCardFunctions.two")} functions={offerCardFunctions[lang]["two"]} />
    </section>

    <div class="w-full h-20 bg-[#454545] bg-opacity-10 my-16 relative rounded-xl flex items-center justify-center">
        <p class="w-auto text-xl font-bold absolute text-black md:px-12 text-start px-4 md:text-center max-lg:text-base max-sm:text-xs">* {t("offer.disclaimer")}</p>
    </div>

    <section class="w-full h-16 flex items-center justify-center">
        <div class="w-full xl:w-1/2 h-16 border-gray-300 border bg-opacity-10 my-16 relative rounded-xl flex items-center justify-start">
            <div class="w-2/12 md:w-1/6 rounded-l-xl bg-bright-red h-full items-center justify-center flex cursor-pointer modal-toggler" id="callus-for-free">
                <Icon name="bi:telephone-fill" class="w-1/2 h-1/2 text-white" />
            </div> 
            <div class="flex items-center justify-center flex-1 h-full">
                <p class="text-sm text-center px-2 md:text-xl 2xl:text-2xl font-bold absolute text-bright-red">{t('offer.freeConsult')}</p>
            </div>
        </div>
    </section>

    <div id="offerCardModal" tabindex="-1" aria-hidden="true" class="fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
        <div class="relative w-full max-w-7xl max-h-full">
            <!-- Modal content -->
            <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
                <div class="w-full p-4 flex justify-end items-center">
                    <button type="button" class="modal-toggler-offercard text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white">
                        <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                        <span class="sr-only">Close modal</span>
                    </button>
                </div>

                <div class="w-full flex items-center flex-col mb-5">
                    <h1 class="px-3 w-full text-center text-xl xl:text-4xl text-bright-red font-bold">{t("offer.interested")}</h1>
                    <p class="text-xs px-2 lg:text-base text-gray-500 text-center w-full">{t("offer.leaveUsNumber")}</p>
                    <p class="text-xs w-7/12 text-left font-bold lg:text-base text-bright-red" id="offercard-error"></p>

                    <div class="w-full flex items-center justify-center max-md:flex-col flex-row my-4">
                        <input class="rounded-lg px-4 my-1 py-2 border bg-gray-200 placeholder:text-opacity-90 border-gray-500" id="offercard-value" placeholder={t("offer.phone")} />
                        <button class="px-8 py-2 my-1 rounded-lg mx-2 text-white text-xl bg-bright-red" id="offercard-send-btn">{t("offer.send")}</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="defaultModal" tabindex="-1" aria-hidden="true" class="fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
        <div class="relative w-full max-w-7xl max-h-full">
            <!-- Modal content -->
            <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
                <div class="w-full p-4 flex justify-end items-center">
                    <button type="button" class="modal-toggler text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white">
                        <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                        <span class="sr-only">Close modal</span>
                    </button>
                </div>

                <div class="w-full flex flex-row">
                    <div class="w-full lg:w-7/12 p-8 lg:px-16">
                        <h1 class="text-black font-bold text-xl md:text-3xl">{t("offer.freeConsult")}</h1>
                        <p class="text-gray-500 w-full text-xs md:text-base">{t("offer.timeOpen")}</p>
    
                        <div class="w-full mt-8 flex flex-col">
                            <p class="text-red-600 font-bold text-lg" id="offercard-input-error"></p>
                            <input id="offercard-input-name" class="rounded-xl my-2 px-4 py-2 outline-none bg-gray-200" placeholder={t("offer.name")} />
                            <input id="offercard-input-email" class="rounded-xl my-2 px-4 py-2 outline-none bg-gray-200" placeholder={t("offer.email")} />
                            <input id="offercard-input-phone" class="rounded-xl my-2 px-4 py-2 outline-none bg-gray-200" placeholder={t("offer.phone")} />
    
                            <textarea id="offercard-input-message" class="my-2 px-4 py-2 text-xl rounded-xl outline-none resize-none focus:outline-none h-48 bg-gray-200" placeholder={t("offer.message")}  />
    
                            <button class="my-2 px-4 py-2 bg-bright-red text-2xl text-white rounded-xl w-48 hover:opacity-90 ease-in-out transition-all duration-200" id="offercard-input-send">{t("offer.send")}</button>
                        </div>
                    </div>

                    <div class="w-5/12 py-8 px-16 max-lg:hidden flex items-center justify-start flex-col">
                        <img src="/assets/logo.svg" class="w-48 h-48" />

                        <p class="my-2 text-base text-center">
                            <span class="font-bold">BEEP - Financial Advice Service K P C House</span> <br />
                            1st Floor Unit 5 Canterbury Road Ashford (Kent) <br />
                            TN24 0BP <br />
                            Company no. 11753640
                        </p>

                        <p class="mt-12 text-base text-center">
                            <span class="font-bold">Email</span> <br />
                            info@beep-fas.co.uk
                        </p>

                        <p class="mt-12 text-base text-center">
                            <span class="font-bold">{t('phone')}</span> <br />
                            +4407725746570 <br />
                            +4407561857560
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>